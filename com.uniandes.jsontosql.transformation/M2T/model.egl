package co.com.ap.model;

import java.util.List;

public class [%= table.name.firstToUpperCase() %] {

	[%for(atributo in table.columns){%]
	[% if(atributo.name.isMergeField(merger)){for(mergeField in atributo.name.getMergedFields(merger)){%]
	private [%= atributo.type.toString.toJavaType() %] [%= mergeField.oldField %];	
		[%}
	}else if(atributo.name.isFatherRelation(foraneas,table.name)){%]
[%= atributo.generarRelacionPadre(foraneas)%]
	[%}else{%] 
	private [%= atributo.type.toString.toJavaType() %] [%= atributo.name %];	
	[%}}%]
	
	[% if(not(foraneas == null )){ for(foranea in foraneas){ %]
[%= foranea.generarListaAtributo(merger)%][% }} %]
	
	public [%= table.name.firstToUpperCase() %](){
	
	}
	
	[% table.columns.select(c | c.generarAccesores(table,merger,foraneas)); %]	
	
	[% if(not(foraneas == null )){foraneas.select(f | f.referencedKey.key_column.table.name.first.equals(table.name)).select( c | c.generarListasRelacion(table,merger));}%]
	
	public String toSQLInsert(){
		String insert = "INSERT INTO "+this.getClass().getSimpleName()+" (";
		String columns = "";
		String values = "Values(";
		[% for(atributo in table.columns){
			atributo.generarInsertColumnas(table,foraneas,merger);		
		}%]
		columns = columns+")";
		values = values +")";
		insert = insert+columns+values+"; \n";
		[% if(not(foraneas == null )){for(foranea in foraneas.select(f | 
			f.referencedKey.key_column.table.name.first.equals(table.name))){
			foranea.generarInsertsListas(table,merger); 
		}}%]
		return insert;
	}

}

[%
	operation String toJavaType(){
		if("int".equals(self)){
			return "Integer";
		}else if("varchar".equals(self)){
			return "String";
		}
	}
	
	operation String isMergeField(merger){
		if(not(merger == null) and merger.fields.select(f | f.name.equals(self)).size()>0){
			return true;
		}else{
			return false;
		}
	}
	
	operation String isFatherRelation(foraneas,clase){
		if(not(foraneas == null)){
			var encontrados = foraneas.select(f | f.foreign_column.name.equals(self)).size();
			if(encontrados > 0){
				return true;
			}else{
				return false;
			}
		}else{
			return false;
		}
	}
	
	operation String getMergedFields(merger){
		return merger.attributeNames.select(a | a.finalField.name.equals(self));		
	}
	
	operation SQL!Column generarRelacionPadre(foraneas){
		for(foranea in foraneas){
			if(foranea.foreign_column.name.equals(self.name)){%]
	private [%= foranea.referencedKey.key_column.table.name.first.firstToUpperCase()%] [%= foranea.referencedKey.key_column.table.name.first%];	
		[% break;}}
	}
	
	operation String obtenerPadreRelacion(foraneas){
		var result = "";
		for(foranea in foraneas){
			if(foranea.foreign_column.name.equals(self)){
				result =  foranea.referencedKey.key_column.table.name.first;
				break;
			}
		}
		return result;
	}
	
	operation SQL!Column generarAccesores(table,merger,foraneas){
		if(self.name.isMergeField(merger)){
			for(mergeField in self.name.getMergedFields(merger)){%]
	public [%= self.type.toString.toJavaType() %] get[%= mergeField.oldField.firstToUpperCase() %](){
		return [%= mergeField.oldField %];
	}
	public void set[%= mergeField.oldField.firstToUpperCase() %]([%= self.type.toString.toJavaType() %] [%= mergeField.oldField %]){
		this.[%= mergeField.oldField %] = [%= mergeField.oldField %];
	}
	[%}}else if(self.name.isFatherRelation(foraneas,table.name)){%]
	public [%= self.name.obtenerPadreRelacion(foraneas).firstToUpperCase()%] get[%= self.name.obtenerPadreRelacion(foraneas).firstToUpperCase()%](){
		return [%= self.name.obtenerPadreRelacion(foraneas)%];
	}
	public void set[%= self.name.obtenerPadreRelacion(foraneas).firstToUpperCase()%]([%= self.name.obtenerPadreRelacion(foraneas).firstToUpperCase()%] [%= self.name.obtenerPadreRelacion(foraneas)%]){
		this.[%= self.name.obtenerPadreRelacion(foraneas)%] = [%= self.name.obtenerPadreRelacion(foraneas)%];
	}
	[%}else{%] 
	public [%= self.type.toString.toJavaType() %] get[%= self.name.firstToUpperCase() %](){
		return [%= self.name %];
	}
	public void set[%= self.name.firstToUpperCase() %]([%= self.type.toString.toJavaType() %] [%= self.name %]){
		this.[%= self.name %] = [%= self.name %];
	}
	[%}
	}
	
	operation SQL!ForeignKey generarListaAtributo(merger){
		if((self.foreign_column.table.name+"s").isMergeField(merger)){
			for(mergeField in (self.foreign_column.table.name+"s").getMergedFields(merger)){%]
	private List<[%= self.foreign_column.table.name.firstToUpperCase() %]> [%= mergeField.oldField%];
	[%}
		}else{%]
	private List<[%= self.foreign_column.table.name.firstToUpperCase() %]> [%= self.foreign_column.table.name %]s;
		[%
		}
	}
	
	operation SQL!ForeignKey generarListasRelacion(table,merger){
		var columna = self.foreign_column.table.name+"s";
		if(columna.isMergeField(merger)){
			for(mergeField in columna.getMergedFields(merger)){%]
	
	public List<[%= self.foreign_column.table.name.firstToUpperCase() %]> get[%= mergeField.oldField.firstToUpperCase() %](){
		return this.[%= mergeField.oldField%];
	}
	public void set[%= mergeField.oldField.firstToUpperCase() %](List<[%= self.foreign_column.table.name.firstToUpperCase() %]> [%= mergeField.oldField%]){
		this.[%= mergeField.oldField%] = [%= mergeField.oldField%];
	}
			[%}%]
		[%}else{%]
		
	public List<[%= self.foreign_column.table.name.firstToUpperCase() %]> get[%= self.foreign_column.table.name.firstToUpperCase() %]s(){
		return this.[%= self.foreign_column.table.name %]s;
	}
	public void set[%= self.foreign_column.table.name.firstToUpperCase() %]s(List<[%= self.foreign_column.table.name.firstToUpperCase() %]> [%= self.foreign_column.table.name %]s){
		this.[%= self.foreign_column.table.name %]s = [%= self.foreign_column.table.name %]s;
	}
		[%}
	}
	
	operation SQL!Column generarInsertColumnas(table,foraneas,merger){ 
		if(self.name.isFatherRelation(foraneas,table.name)){%]
		if(this.[%= self.name.obtenerPadreRelacion(foraneas)%]!=null){
			if(columns.equals("")){
				columns = columns + "[%= self.name.obtenerPadreRelacion(foraneas)%]";
				if(this.[%= self.name.obtenerPadreRelacion(foraneas)%].getClass().getSimpleName().equals("String")){
					values = values + "'"+[%= self.name.obtenerPadreRelacion(foraneas)%]+"'";
				}else{
					values = values + [%= self.name.obtenerPadreRelacion(foraneas)%];
				}
			}else{
				columns = columns + ",[%= self.name.obtenerPadreRelacion(foraneas)%]";
				if(this.[%= self.name.obtenerPadreRelacion(foraneas)%].getClass().getSimpleName().equals("String")){
					values = values + ",'"+[%= self.name.obtenerPadreRelacion(foraneas)%]+"'";
				}else{
					values = values + ","+[%= self.name.obtenerPadreRelacion(foraneas)%];
				}
			}
						
		}
		[%}else if(self.name.isMergeField(merger)){%]
		if([%=table.name.firstToUpperCase()%]MergerField.get[%=self.name.firstToUpperCase()%](this)!=null){
			if(columns.equals("")){
				columns = columns + "[%= self.name%]";
				if([%=table.name.firstToUpperCase()%]MergerField.get[%=self.name.firstToUpperCase()%](this).getClass().getSimpleName().equals("String")){
					values = values + "'"+[%=table.name.firstToUpperCase()%]MergerField.get[%=self.name.firstToUpperCase()%](this)+"'";
				}else{
					values = values + [%=table.name.firstToUpperCase()%]MergerField.get[%=self.name.firstToUpperCase()%](this);
				}
			}else{
				columns = columns + ",[%= self.name%]";
				if([%=table.name.firstToUpperCase()%]MergerField.get[%=self.name.firstToUpperCase()%](this).getClass().getSimpleName().equals("String")){
					values = values + ",'"+[%=table.name.firstToUpperCase()%]MergerField.get[%=self.name.firstToUpperCase()%](this)+"'";
				}else{
					values = values + ","+[%=table.name.firstToUpperCase()%]MergerField.get[%=self.name.firstToUpperCase()%](this);
				}
			}
						
		}
		[%}else{%]
		if(this.[%= self.name%]!=null){
			if(columns.equals("")){
				columns = columns + "[%= self.name%]";
				if(this.[%= self.name%].getClass().getSimpleName().equals("String")){
					values = values + "'"+[%= self.name%]+"'";
				}else{
					values = values + [%= self.name%];
				}
			}else{
				columns = columns + ",[%= self.name%]";
				if(this.[%= self.name%].getClass().getSimpleName().equals("String")){
					values = values + ",'"+[%= self.name%]+"'";
				}else{
					values = values + ","+[%= self.name%];
				}
			}
						
		}	
		[%}
	}
	
	operation SQL!ForeignKey generarInsertsListas(table,merger){
		if((self.foreign_column.table.name+"s").isMergeField(merger)){
			for(mergeField in (self.foreign_column.table.name+"s").getMergedFields(merger)){%]
		if([%= mergeField.oldField%]!=null){
			for ([%= self.foreign_column.table.name.firstToUpperCase() %] [%= self.foreign_column.table.name%] : [%= mergeField.oldField%]) {
				[%= self.foreign_column.table.name%].set[%= table.name.firstToUpperCase() %](this);
				insert = insert + [%= self.foreign_column.table.name%].toSQLInsert();
			}
		}	
			[%}
		}else{%]
		if([%= self.foreign_column.table.name%]s!=null){
			for ([%= self.foreign_column.table.name.firstToUpperCase() %] [%= self.foreign_column.table.name%] : [%= self.foreign_column.table.name%]s) {
				[%= self.foreign_column.table.name%].set[%= table.name.firstToUpperCase() %](this);
				insert = insert + [%= self.foreign_column.table.name%].toSQLInsert();
			}
		}
		[%}
	}
	
%]
